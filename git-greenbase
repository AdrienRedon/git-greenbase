#!/bin/bash

if [[ ${GREENBASE_DEBUG-false} != false ]]; then
  set -x
fi

set -e

# Defaults
export branch=master
export dry_run=false

inject() {
  # Source the script referenced by the variable name matching $1.
  #  If no matching variable is found, source the file matching $1.
  # When searching for a variable matching $1, '.' will be replaced with '_'
  [[ $# -ne 1 ]] && { echo "Nothing to inject." >&2; exit 1; }
  var=$( echo $1 | tr '\.' '_' )
  injected_file="${!var}"
  if [[ ! -z $injected_file ]]; then
    echo Injecting $injected_file
    source "${injected_file}"
  else
    source "./${1}"
  fi
}

# Source helper scripts
inject 'greenbase.prep_environment'
inject 'greenbase.resolve_deps'
inject 'greenbase.config'
inject 'greenbase.opts'
inject 'greenbase.provider'

get_green_hash() {
  hash="$(${scriptdir}/ci-providers/${provider})"
  echo $hash
}

rebase_after_pull() {
  [[ $($git config branch.autosetuprebase) -eq always ]] \
    || [[ $($git config pull.rebase) -eq true ]]
}

upstream_branch() {
  $git for-each-ref --format='%(upstream:short)' $($git symbolic-ref -q HEAD)
}

# Fetch the latest
branch=$($git rev-parse --abbrev-ref HEAD)

if [[ $branch -ne master ]]; then
  $git fetch origin master:master > /dev/null 2>&1
else
  $git fetch > /dev/null 2>&1
fi

greenhash=$(get_green_hash)
if [[ -z $greenhash ]]; then
  echo "Unable to retrieve latest green build." >&2
  exit 1
fi

if ! $git cat-file -e $greenhash; then
  echo "${greenhash} not found in local repository. Check your configs." >&2
  exit 1
fi

if [[ $greenhash == $($git rev-parse master) ]]; then
  echo 'Already on the latest green build. Tidying up.'
fi

echo "Latest green build: $($git log -1 --oneline $greenhash)"

echo -n "Resetting master to match "
# Update origin/master to match greenhash
$git update-ref refs/remotes/origin/master $greenhash

if [[ $branch == master ]]; then
  [[ $dry_run == false ]] && $git reset --hard $greenhash
else
  # Update master to match greenhash
  $git update-ref refs/heads/master $greenhash
  if rebase_after_pull && [[ ! -z upstream_branch ]]; then
    echo "and rebasing ${branch} onto master"
    [[ $dry_run == false ]] && $git pull --rebase > /dev/null 2>&1
  fi
fi

