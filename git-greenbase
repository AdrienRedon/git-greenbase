#!/bin/bash

if [[ ${GREENBASE_DEBUG-false} != false ]]; then
  set -x
fi

source ./greenbase.resolve_deps
source ./greenbase.config

declare -x branch=master
declare -x dry_run=false

# -- Parse options && Display help
# /
#

print_help() {
  cat >&2 <<END
usage: git greenbase [<options>] branch
  -p <provider> Use specific CI <provider>
  -b <branch>   Specify <branch> other than master
  -d      (Dry Run) Don't do anything destructive

END
}

while getopts "b:dp:" opt; do
  case $opt in
    p)
      provider_override="${OPTARG}"
      ;;
    b)
      branch="${OPTARG}"
      ;;
    d)
      dry_run=true
      ;;
    \?)
      print_help
      exit 1
      ;;
  esac
done


# -- Set provider
# /
#

provider_exists() {
  [[ -e "${scriptdir}/ci-providers/$1" ]]
}

print_providers() {
  pushd ./ > /dev/null
  d="${scriptdir}/ci-providers"
  cd $d
  echo -e "\ngreenbase supports the following CI providers:"
  find "${d}" -maxdepth 1 -type f -not -name '*~' -printf " â€¢ %f\n" 
  echo -e "\nWant more providers?\nPull requests welcome at https://github.com/tygerbytes/git-greenbase\n"
  popd > /dev/null
} >&2

declare -x provider

if [[ ! -z $provider_override ]]; then
  provider=$provider_override
else
  provider=$(get_config "provider") > /dev/null 2>&1
fi

if [[ -z $provider ]]; then
  cat >&2 <<END

  CI provider not set.
  Configure with:
  
    git config greenbase.provider <provider>

  Or:

    git greenbase -p <provider>

END
  exit 1
fi

if ! provider_exists $provider; then
  echo "Provider '${provider}' not supported." >&2
  print_providers
  exit 1
fi


# -- Main script
# /
#

get_green_hash() {
  hash="$(${scriptdir}/ci-providers/${provider})"
  echo $hash
}

rebase_after_pull() {
  [[ $($git config branch.autosetuprebase) -eq always ]] \
    || [[ $($git config pull.rebase) -eq true ]]
}

upstream_branch() {
  $git for-each-ref --format='%(upstream:short)' $($git symbolic-ref -q HEAD)
}

# Fetch the latest
branch=$($git rev-parse --abbrev-ref HEAD)

if [[ $branch -ne master ]]; then
  $git fetch origin master:master > /dev/null 2>&1
else
  $git fetch > /dev/null 2>&1
fi

greenhash=$(get_green_hash)
if [[ -z $greenhash ]]; then
  echo "Unable to retrieve latest green build." >&2
  exit 1
fi

if ! $git cat-file -e $greenhash; then
  echo "${greenhash} not found in local repository. Check your configs." >&2
  exit 1
fi

if [[ $greenhash == $($git rev-parse master) ]]; then
  echo 'Already on the latest green build. Tidying up.'
fi

echo "Latest green build: $($git log -1 --oneline $greenhash)"

echo -n "Resetting master to match "
# Update origin/master to match greenhash
$git update-ref refs/remotes/origin/master $greenhash

if [[ $branch == master ]]; then
  [[ $dry_run == false ]] && $git reset --hard $greenhash
else
  # Update master to match greenhash
  $git update-ref refs/heads/master $greenhash
  if rebase_after_pull && [[ ! -z upstream_branch ]]; then
    echo "and rebasing ${branch} onto master"
    [[ $dry_run == false ]] && $git pull --rebase > /dev/null 2>&1
  fi
fi

